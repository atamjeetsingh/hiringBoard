/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package co.pragra.api;

import org.openapitools.model.ErrorResponse;
import org.openapitools.model.JobPost;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-03T12:31:21.921085300-08:00[America/Los_Angeles]")
@Validated
@Tag(name = "job", description = "the job API")
public interface JobApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /job : Create new job
     * Create new job
     *
     * @param jobPost Create a new job (required)
     * @return Successful operation (status code 200)
     *         or Invalid data supplied (status code 500)
     */
    @Operation(
        operationId = "createJob",
        summary = "Create new job",
        tags = { "job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobPost.class))
            }),
            @ApiResponse(responseCode = "500", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<JobPost> createJob(
        @Parameter(name = "JobPost", description = "Create a new job", required = true) @Valid @RequestBody JobPost jobPost
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salaryRange\" : { \"salaryMaximum\" : \"salaryMaximum\", \"salaryType\" : \"Annually\", \"salaryMinimum\" : \"salaryMinimum\", \"wage\" : \"wage\" }, \"positionTitle\" : \"Java Programmer\", \"howToApply\" : { \"website\" : \"website\", \"applicationMethod\" : \"Easy Apply\", \"email\" : \"email\" }, \"customeQuestionList\" : [ { \"question\" : \"question\", \"answereType\" : \"text\" }, { \"question\" : \"question\", \"answereType\" : \"text\" } ], \"description\" : \"description\", \"requiredQualification\" : \"requiredQualification\", \"id\" : 10, \"jobCity\" : [ \"jobCity\", \"jobCity\", \"jobCity\" ], \"jobType\" : \"Full Time\", \"closingDate\" : \"2000-01-23\", \"userId\" : 10, \"jobPostStatus\" : \"Draft\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /job/{jobId} : Delete jobPOst by ID
     * Delete jobPOst by ID
     *
     * @param jobId ID of jobPost to delete (required)
     * @return Successful operation (status code 200)
     *         or Invalid jobPOst ID supplied (status code 400)
     *         or jobPOst not found (status code 404)
     */
    @Operation(
        operationId = "deleteJobById",
        summary = "Delete jobPOst by ID",
        tags = { "job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobPost.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid jobPOst ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "jobPOst not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/job/{jobId}",
        produces = { "application/json" }
    )
    default ResponseEntity<JobPost> deleteJobById(
        @Parameter(name = "jobId", description = "ID of jobPost to delete", required = true) @PathVariable("jobId") Long jobId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salaryRange\" : { \"salaryMaximum\" : \"salaryMaximum\", \"salaryType\" : \"Annually\", \"salaryMinimum\" : \"salaryMinimum\", \"wage\" : \"wage\" }, \"positionTitle\" : \"Java Programmer\", \"howToApply\" : { \"website\" : \"website\", \"applicationMethod\" : \"Easy Apply\", \"email\" : \"email\" }, \"customeQuestionList\" : [ { \"question\" : \"question\", \"answereType\" : \"text\" }, { \"question\" : \"question\", \"answereType\" : \"text\" } ], \"description\" : \"description\", \"requiredQualification\" : \"requiredQualification\", \"id\" : 10, \"jobCity\" : [ \"jobCity\", \"jobCity\", \"jobCity\" ], \"jobType\" : \"Full Time\", \"closingDate\" : \"2000-01-23\", \"userId\" : 10, \"jobPostStatus\" : \"Draft\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /job/{jobId} : Find jobPost by ID
     * Find jobPost by ID
     *
     * @param jobId ID of job to return (required)
     * @return Successful operation (status code 200)
     *         or Invalid jobPost ID supplied (status code 400)
     *         or jobPost not found (status code 404)
     */
    @Operation(
        operationId = "findJobById",
        summary = "Find jobPost by ID",
        tags = { "job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobPost.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid jobPost ID supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "jobPost not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{jobId}",
        produces = { "application/json" }
    )
    default ResponseEntity<JobPost> findJobById(
        @Parameter(name = "jobId", description = "ID of job to return", required = true) @PathVariable("jobId") Long jobId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salaryRange\" : { \"salaryMaximum\" : \"salaryMaximum\", \"salaryType\" : \"Annually\", \"salaryMinimum\" : \"salaryMinimum\", \"wage\" : \"wage\" }, \"positionTitle\" : \"Java Programmer\", \"howToApply\" : { \"website\" : \"website\", \"applicationMethod\" : \"Easy Apply\", \"email\" : \"email\" }, \"customeQuestionList\" : [ { \"question\" : \"question\", \"answereType\" : \"text\" }, { \"question\" : \"question\", \"answereType\" : \"text\" } ], \"description\" : \"description\", \"requiredQualification\" : \"requiredQualification\", \"id\" : 10, \"jobCity\" : [ \"jobCity\", \"jobCity\", \"jobCity\" ], \"jobType\" : \"Full Time\", \"closingDate\" : \"2000-01-23\", \"userId\" : 10, \"jobPostStatus\" : \"Draft\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /job : Find all jobPosts
     * Find all jobPosts
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "findJobs",
        summary = "Find all jobPosts",
        tags = { "job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobPost.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job",
        produces = { "application/json" }
    )
    default ResponseEntity<List<JobPost>> findJobs(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salaryRange\" : { \"salaryMaximum\" : \"salaryMaximum\", \"salaryType\" : \"Annually\", \"salaryMinimum\" : \"salaryMinimum\", \"wage\" : \"wage\" }, \"positionTitle\" : \"Java Programmer\", \"howToApply\" : { \"website\" : \"website\", \"applicationMethod\" : \"Easy Apply\", \"email\" : \"email\" }, \"customeQuestionList\" : [ { \"question\" : \"question\", \"answereType\" : \"text\" }, { \"question\" : \"question\", \"answereType\" : \"text\" } ], \"description\" : \"description\", \"requiredQualification\" : \"requiredQualification\", \"id\" : 10, \"jobCity\" : [ \"jobCity\", \"jobCity\", \"jobCity\" ], \"jobType\" : \"Full Time\", \"closingDate\" : \"2000-01-23\", \"userId\" : 10, \"jobPostStatus\" : \"Draft\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /job : Update job post
     * Update job post
     *
     * @param jobPost Update job post (required)
     * @return Successful operation (status code 200)
     *         or Invalid Job Id (status code 404)
     *         or Invalid data supplied (status code 500)
     */
    @Operation(
        operationId = "updateJobPost",
        summary = "Update job post",
        tags = { "job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = JobPost.class))
            }),
            @ApiResponse(responseCode = "404", description = "Invalid Job Id", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Invalid data supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/job",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<JobPost> updateJobPost(
        @Parameter(name = "JobPost", description = "Update job post", required = true) @Valid @RequestBody JobPost jobPost
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"salaryRange\" : { \"salaryMaximum\" : \"salaryMaximum\", \"salaryType\" : \"Annually\", \"salaryMinimum\" : \"salaryMinimum\", \"wage\" : \"wage\" }, \"positionTitle\" : \"Java Programmer\", \"howToApply\" : { \"website\" : \"website\", \"applicationMethod\" : \"Easy Apply\", \"email\" : \"email\" }, \"customeQuestionList\" : [ { \"question\" : \"question\", \"answereType\" : \"text\" }, { \"question\" : \"question\", \"answereType\" : \"text\" } ], \"description\" : \"description\", \"requiredQualification\" : \"requiredQualification\", \"id\" : 10, \"jobCity\" : [ \"jobCity\", \"jobCity\", \"jobCity\" ], \"jobType\" : \"Full Time\", \"closingDate\" : \"2000-01-23\", \"userId\" : 10, \"jobPostStatus\" : \"Draft\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
